const express = require('express');
const cors = require('cors');
const axios = require('axios');
const fs = require('fs');

const app = express();
const PORT = 3000;

app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// üîê –î–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
const CLIENT_ID = '0c026147-bf5f-4157-9ae3-6f7ad1ef7a68';
const CLIENT_SECRET = '5aOpt8J5JWOZwH3B0t2l7ZQaU3ZxFKmHlcupvb1OPlY0zoyuAVcKs207jP1p8Suq';
const REDIRECT_URI = 'https://aecbf1f9b56a.ngrok-free.app/oauth';
const AMO_DOMAIN = 'lazizkhamrakulov.amocrm.ru';
const TOKEN_PATH = './tokens.json';

// üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª
function saveTokens(tokens) {
    const expiresAt = Date.now() + tokens.expires_in * 1000;
    fs.writeFileSync(TOKEN_PATH, JSON.stringify({ ...tokens, expires_at: expiresAt }, null, 2));
}

// üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
function loadTokens() {
    if (!fs.existsSync(TOKEN_PATH)) throw new Error('–§–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return JSON.parse(fs.readFileSync(TOKEN_PATH, 'utf-8'));
}

// üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access_token –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
async function refreshTokensIfNeeded() {
    let tokens = loadTokens();

    if (Date.now() >= tokens.expires_at - 60000) {
        console.log('üîÑ –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º...');
        const response = await axios.post(`https://${AMO_DOMAIN}/oauth2/access_token`, {
            client_id: CLIENT_ID,
            client_secret: CLIENT_SECRET,
            grant_type: 'refresh_token',
            refresh_token: tokens.refresh_token,
            redirect_uri: REDIRECT_URI
        });

        tokens = response.data;
        saveTokens(tokens);
        console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω');
    }

    return tokens;
}

// üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã: —Å–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É –∏ –∫–æ–Ω—Ç–∞–∫—Ç
app.post('/api/lead', async (req, res) => {
    const data = req.body;
    console.log('üì© –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞:', data);

    const tokens = await refreshTokensIfNeeded();
    const accessToken = tokens.access_token;

    const statusId = parseInt(data.stage); // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç—Ç–∞–ø

    try {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        const leadResponse = await axios.post(
            `https://${AMO_DOMAIN}/api/v4/leads`,
            [
                {
                    name: `–ó–∞—è–≤–∫–∞: ${data.name}`,
                    status_id: statusId
                }
            ],
            {
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        const leadId = leadResponse.data._embedded.leads[0].id;

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        await axios.post(
            `https://${AMO_DOMAIN}/api/v4/contacts`,
            [
                {
                    name: data.name,
                    custom_fields_values: [
                        {
                            field_code: 'PHONE',
                            values: [{ value: data.phone }]
                        },
                        {
                            field_code: 'EMAIL',
                            values: [{ value: data.email }]
                        }
                    ],
                    _embedded: {
                        leads: [{ id: leadId }]
                    }
                }
            ],
            {
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        res.json({ status: 'ok', message: '–ö–æ–Ω—Ç–∞–∫—Ç –∏ —Å–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –≤–æ—Ä–æ–Ω–∫–∏' });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–¥–∞/–∫–æ–Ω—Ç–∞–∫—Ç–∞:', error.response?.data || error.message);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ amoCRM' });
    }
});


// üåê OAuth —Ä–µ–¥–∏—Ä–µ–∫—Ç –æ—Ç amoCRM
app.get('/oauth', async (req, res) => {
    const { code } = req.query;

    if (!code) {
        return res.status(400).send('–ù–µ—Ç –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }

    try {
        const response = await axios.post(`https://${AMO_DOMAIN}/oauth2/access_token`, {
            client_id: CLIENT_ID,
            client_secret: CLIENT_SECRET,
            grant_type: 'authorization_code',
            code,
            redirect_uri: REDIRECT_URI
        });

        const tokens = response.data;
        saveTokens(tokens);
        console.log('üéâ –¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', tokens);
        res.send('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ú–æ–∂–µ—à—å –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ.');
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', err.response?.data || err.message);
        res.status(500).send('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});

app.get('/pipeline-statuses', async (req, res) => {
    const tokens = await refreshTokensIfNeeded();
    try {
        const response = await axios.get(`https://${AMO_DOMAIN}/api/v4/leads/pipelines`, {
            headers: {
                Authorization: `Bearer ${tokens.access_token}`
            }
        });

        res.json(response.data);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–¥–∏–π:', err.response?.data || err.message);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–¥–∏–∏' });
    }
});

